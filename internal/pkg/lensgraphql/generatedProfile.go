// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package lensgraphql

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

type SingleProfileQueryRequest struct {
	// The profile id - muted because it is not used in the query
	// ProfileId string `json:"profileId"`
	// The handle for the profile
	Handle string `json:"handle"`
}

// GetProfileId returns SingleProfileQueryRequest.ProfileId, and is useful for accessing the field via an interface.
// func (v *SingleProfileQueryRequest) GetProfileId() string { return v.ProfileId }

// GetHandle returns SingleProfileQueryRequest.Handle, and is useful for accessing the field via an interface.
func (v *SingleProfileQueryRequest) GetHandle() string { return v.Handle }

// __profileInput is used internally by genqlient
type __profileInput struct {
	Request SingleProfileQueryRequest `json:"request"`
}

// GetRequest returns __profileInput.Request, and is useful for accessing the field via an interface.
func (v *__profileInput) GetRequest() SingleProfileQueryRequest { return v.Request }

// profileProfile includes the requested fields of the GraphQL type Profile.
// The GraphQL type's documentation follows.
//
// The Profile
type profileProfile struct {
	// Bio of the profile
	Bio string `json:"bio"`
	// The dispatcher
	Dispatcher profileProfileDispatcher `json:"dispatcher"`
	// Follow nft address
	FollowNftAddress string `json:"followNftAddress"`
	// The profile handle
	Handle string `json:"handle"`
	// The profile id
	Id string `json:"id"`
	// The profile interests
	Interests []string `json:"interests"`
	// Is the profile default
	IsDefault bool `json:"isDefault"`
	// Metadata url
	Metadata string `json:"metadata"`
	// Name of the profile
	Name string `json:"name"`
	// Profile stats
	Stats profileProfileStats `json:"stats"`
	// The cover picture for the profile
	CoverPicture profileProfileCoverPictureProfileMedia `json:"-"`
}

// GetBio returns profileProfile.Bio, and is useful for accessing the field via an interface.
func (v *profileProfile) GetBio() string { return v.Bio }

// GetDispatcher returns profileProfile.Dispatcher, and is useful for accessing the field via an interface.
func (v *profileProfile) GetDispatcher() profileProfileDispatcher { return v.Dispatcher }

// GetFollowNftAddress returns profileProfile.FollowNftAddress, and is useful for accessing the field via an interface.
func (v *profileProfile) GetFollowNftAddress() string { return v.FollowNftAddress }

// GetHandle returns profileProfile.Handle, and is useful for accessing the field via an interface.
func (v *profileProfile) GetHandle() string { return v.Handle }

// GetId returns profileProfile.Id, and is useful for accessing the field via an interface.
func (v *profileProfile) GetId() string { return v.Id }

// GetInterests returns profileProfile.Interests, and is useful for accessing the field via an interface.
func (v *profileProfile) GetInterests() []string { return v.Interests }

// GetIsDefault returns profileProfile.IsDefault, and is useful for accessing the field via an interface.
func (v *profileProfile) GetIsDefault() bool { return v.IsDefault }

// GetMetadata returns profileProfile.Metadata, and is useful for accessing the field via an interface.
func (v *profileProfile) GetMetadata() string { return v.Metadata }

// GetName returns profileProfile.Name, and is useful for accessing the field via an interface.
func (v *profileProfile) GetName() string { return v.Name }

// GetStats returns profileProfile.Stats, and is useful for accessing the field via an interface.
func (v *profileProfile) GetStats() profileProfileStats { return v.Stats }

// GetCoverPicture returns profileProfile.CoverPicture, and is useful for accessing the field via an interface.
func (v *profileProfile) GetCoverPicture() profileProfileCoverPictureProfileMedia {
	return v.CoverPicture
}

func (v *profileProfile) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*profileProfile
		CoverPicture json.RawMessage `json:"coverPicture"`
		graphql.NoUnmarshalJSON
	}
	firstPass.profileProfile = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CoverPicture
		src := firstPass.CoverPicture
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalprofileProfileCoverPictureProfileMedia(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal profileProfile.CoverPicture: %w", err)
			}
		}
	}
	return nil
}

type __premarshalprofileProfile struct {
	Bio string `json:"bio"`

	Dispatcher profileProfileDispatcher `json:"dispatcher"`

	FollowNftAddress string `json:"followNftAddress"`

	Handle string `json:"handle"`

	Id string `json:"id"`

	Interests []string `json:"interests"`

	IsDefault bool `json:"isDefault"`

	Metadata string `json:"metadata"`

	Name string `json:"name"`

	Stats profileProfileStats `json:"stats"`

	CoverPicture json.RawMessage `json:"coverPicture"`
}

func (v *profileProfile) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *profileProfile) __premarshalJSON() (*__premarshalprofileProfile, error) {
	var retval __premarshalprofileProfile

	retval.Bio = v.Bio
	retval.Dispatcher = v.Dispatcher
	retval.FollowNftAddress = v.FollowNftAddress
	retval.Handle = v.Handle
	retval.Id = v.Id
	retval.Interests = v.Interests
	retval.IsDefault = v.IsDefault
	retval.Metadata = v.Metadata
	retval.Name = v.Name
	retval.Stats = v.Stats
	{

		dst := &retval.CoverPicture
		src := v.CoverPicture
		var err error
		*dst, err = __marshalprofileProfileCoverPictureProfileMedia(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal profileProfile.CoverPicture: %w", err)
		}
	}
	return &retval, nil
}

// profileProfileCoverPictureMediaSet includes the requested fields of the GraphQL type MediaSet.
// The GraphQL type's documentation follows.
//
// The Media Set
type profileProfileCoverPictureMediaSet struct {
	Typename string `json:"__typename"`
	// Original media
	Original profileProfileCoverPictureMediaSetOriginalMedia `json:"original"`
}

// GetTypename returns profileProfileCoverPictureMediaSet.Typename, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureMediaSet) GetTypename() string { return v.Typename }

// GetOriginal returns profileProfileCoverPictureMediaSet.Original, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureMediaSet) GetOriginal() profileProfileCoverPictureMediaSetOriginalMedia {
	return v.Original
}

// profileProfileCoverPictureMediaSetOriginalMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// The Media url
type profileProfileCoverPictureMediaSetOriginalMedia struct {
	// The token image nft
	Url string `json:"url"`
}

// GetUrl returns profileProfileCoverPictureMediaSetOriginalMedia.Url, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureMediaSetOriginalMedia) GetUrl() string { return v.Url }

// profileProfileCoverPictureNftImage includes the requested fields of the GraphQL type NftImage.
// The GraphQL type's documentation follows.
//
// The NFT image
type profileProfileCoverPictureNftImage struct {
	Typename string `json:"__typename"`
	// The token image nft
	ChainId int `json:"chainId"`
	// The contract address
	ContractAddress string `json:"contractAddress"`
	// The token id of the nft
	TokenId string `json:"tokenId"`
	// The token image nft
	Uri string `json:"uri"`
	// If the NFT is verified
	Verified bool `json:"verified"`
}

// GetTypename returns profileProfileCoverPictureNftImage.Typename, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureNftImage) GetTypename() string { return v.Typename }

// GetChainId returns profileProfileCoverPictureNftImage.ChainId, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureNftImage) GetChainId() int { return v.ChainId }

// GetContractAddress returns profileProfileCoverPictureNftImage.ContractAddress, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureNftImage) GetContractAddress() string { return v.ContractAddress }

// GetTokenId returns profileProfileCoverPictureNftImage.TokenId, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureNftImage) GetTokenId() string { return v.TokenId }

// GetUri returns profileProfileCoverPictureNftImage.Uri, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureNftImage) GetUri() string { return v.Uri }

// GetVerified returns profileProfileCoverPictureNftImage.Verified, and is useful for accessing the field via an interface.
func (v *profileProfileCoverPictureNftImage) GetVerified() bool { return v.Verified }

// profileProfileCoverPictureProfileMedia includes the requested fields of the GraphQL interface ProfileMedia.
//
// profileProfileCoverPictureProfileMedia is implemented by the following types:
// profileProfileCoverPictureNftImage
// profileProfileCoverPictureMediaSet
type profileProfileCoverPictureProfileMedia interface {
	implementsGraphQLInterfaceprofileProfileCoverPictureProfileMedia()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *profileProfileCoverPictureNftImage) implementsGraphQLInterfaceprofileProfileCoverPictureProfileMedia() {
}
func (v *profileProfileCoverPictureMediaSet) implementsGraphQLInterfaceprofileProfileCoverPictureProfileMedia() {
}

func __unmarshalprofileProfileCoverPictureProfileMedia(b []byte, v *profileProfileCoverPictureProfileMedia) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "NftImage":
		*v = new(profileProfileCoverPictureNftImage)
		return json.Unmarshal(b, *v)
	case "MediaSet":
		*v = new(profileProfileCoverPictureMediaSet)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ProfileMedia.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for profileProfileCoverPictureProfileMedia: "%v"`, tn.TypeName)
	}
}

func __marshalprofileProfileCoverPictureProfileMedia(v *profileProfileCoverPictureProfileMedia) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *profileProfileCoverPictureNftImage:
		typename = "NftImage"

		result := struct {
			TypeName string `json:"__typename"`
			*profileProfileCoverPictureNftImage
		}{typename, v}
		return json.Marshal(result)
	case *profileProfileCoverPictureMediaSet:
		typename = "MediaSet"

		result := struct {
			TypeName string `json:"__typename"`
			*profileProfileCoverPictureMediaSet
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for profileProfileCoverPictureProfileMedia: "%T"`, v)
	}
}

// profileProfileDispatcher includes the requested fields of the GraphQL type Dispatcher.
// The GraphQL type's documentation follows.
//
// The dispatcher
type profileProfileDispatcher struct {
	// The dispatcher address
	Address string `json:"address"`
	// If the dispatcher can use the relay
	CanUseRelay bool `json:"canUseRelay"`
}

// GetAddress returns profileProfileDispatcher.Address, and is useful for accessing the field via an interface.
func (v *profileProfileDispatcher) GetAddress() string { return v.Address }

// GetCanUseRelay returns profileProfileDispatcher.CanUseRelay, and is useful for accessing the field via an interface.
func (v *profileProfileDispatcher) GetCanUseRelay() bool { return v.CanUseRelay }

// profileProfileStats includes the requested fields of the GraphQL type ProfileStats.
// The GraphQL type's documentation follows.
//
// The Profile Stats
type profileProfileStats struct {
	Id string `json:"id"`
	// Total collects count
	TotalCollects int `json:"totalCollects"`
	// Total comment count
	TotalComments int `json:"totalComments"`
	// Total follower count
	TotalFollowers int `json:"totalFollowers"`
	// Total following count (remember the wallet follows not profile so will be same for every profile they own)
	TotalFollowing int `json:"totalFollowing"`
	// Total mirror count
	TotalMirrors int `json:"totalMirrors"`
	// Total post count
	TotalPosts int `json:"totalPosts"`
	// Total publication count
	TotalPublications int `json:"totalPublications"`
}

// GetId returns profileProfileStats.Id, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetId() string { return v.Id }

// GetTotalCollects returns profileProfileStats.TotalCollects, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetTotalCollects() int { return v.TotalCollects }

// GetTotalComments returns profileProfileStats.TotalComments, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetTotalComments() int { return v.TotalComments }

// GetTotalFollowers returns profileProfileStats.TotalFollowers, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetTotalFollowers() int { return v.TotalFollowers }

// GetTotalFollowing returns profileProfileStats.TotalFollowing, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetTotalFollowing() int { return v.TotalFollowing }

// GetTotalMirrors returns profileProfileStats.TotalMirrors, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetTotalMirrors() int { return v.TotalMirrors }

// GetTotalPosts returns profileProfileStats.TotalPosts, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetTotalPosts() int { return v.TotalPosts }

// GetTotalPublications returns profileProfileStats.TotalPublications, and is useful for accessing the field via an interface.
func (v *profileProfileStats) GetTotalPublications() int { return v.TotalPublications }

// profileResponse is returned by profile on success.
type profileResponse struct {
	Profile profileProfile `json:"profile"`
}

// GetProfile returns profileResponse.Profile, and is useful for accessing the field via an interface.
func (v *profileResponse) GetProfile() profileProfile { return v.Profile }

func profile(
	ctx context.Context,
	client graphql.Client,
	request SingleProfileQueryRequest,
) (*profileResponse, error) {
	req := &graphql.Request{
		OpName: "profile",
		Query: `
query profile ($request: SingleProfileQueryRequest!) {
	profile(request: $request) {
		bio
		dispatcher {
			address
			canUseRelay
		}
		followNftAddress
		handle
		id
		interests
		isDefault
		metadata
		name
		stats {
			id
			totalCollects
			totalComments
			totalFollowers
			totalFollowing
			totalMirrors
			totalPosts
			totalPublications
		}
		coverPicture {
			__typename
			... on NftImage {
				__typename
				chainId
				contractAddress
				tokenId
				uri
				verified
			}
			... on MediaSet {
				__typename
				original {
					url
				}
			}
		}
	}
}
`,
		Variables: &__profileInput{
			Request: request,
		},
	}
	var err error

	var data profileResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
