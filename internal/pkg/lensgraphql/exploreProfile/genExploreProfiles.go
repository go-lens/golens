// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package exploreProfile

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// profile sort criteria
type ProfileSortCriteria string

const (
	ProfileSortCriteriaCreatedOn       ProfileSortCriteria = "CREATED_ON"
	ProfileSortCriteriaMostFollowers   ProfileSortCriteria = "MOST_FOLLOWERS"
	ProfileSortCriteriaLatestCreated   ProfileSortCriteria = "LATEST_CREATED"
	ProfileSortCriteriaMostPosts       ProfileSortCriteria = "MOST_POSTS"
	ProfileSortCriteriaMostComments    ProfileSortCriteria = "MOST_COMMENTS"
	ProfileSortCriteriaMostMirrors     ProfileSortCriteria = "MOST_MIRRORS"
	ProfileSortCriteriaMostPublication ProfileSortCriteria = "MOST_PUBLICATION"
	ProfileSortCriteriaMostCollects    ProfileSortCriteria = "MOST_COLLECTS"
)

// __exploreProfilesInput is used internally by genqlient
type __exploreProfilesInput struct {
	Cursor       string              `json:"cursor"`
	SortCriteria ProfileSortCriteria `json:"sortCriteria"`
}

// GetCursor returns __exploreProfilesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__exploreProfilesInput) GetCursor() string { return v.Cursor }

// GetSortCriteria returns __exploreProfilesInput.SortCriteria, and is useful for accessing the field via an interface.
func (v *__exploreProfilesInput) GetSortCriteria() ProfileSortCriteria { return v.SortCriteria }

// exploreProfilesExploreProfilesExploreProfileResult includes the requested fields of the GraphQL type ExploreProfileResult.
// The GraphQL type's documentation follows.
//
// The paginated publication result
type exploreProfilesExploreProfilesExploreProfileResult struct {
	PageInfo exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo `json:"pageInfo"`
	Items    []exploreProfilesExploreProfilesExploreProfileResultItemsProfile              `json:"items"`
}

// GetPageInfo returns exploreProfilesExploreProfilesExploreProfileResult.PageInfo, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResult) GetPageInfo() exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo {
	return v.PageInfo
}

// GetItems returns exploreProfilesExploreProfilesExploreProfileResult.Items, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResult) GetItems() []exploreProfilesExploreProfilesExploreProfileResultItemsProfile {
	return v.Items
}

// exploreProfilesExploreProfilesExploreProfileResultItemsProfile includes the requested fields of the GraphQL type Profile.
// The GraphQL type's documentation follows.
//
// The Profile
type exploreProfilesExploreProfilesExploreProfileResultItemsProfile struct {
	// The profile handle
	Handle string `json:"handle"`
	// The profile id
	Id string `json:"id"`
	// The on chain identity
	OnChainIdentity exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentity `json:"onChainIdentity"`
	// Who owns the profile
	OwnedBy string `json:"ownedBy"`
	// Profile stats
	Stats exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats `json:"stats"`
	// Metadata url
	Metadata string `json:"metadata"`
}

// GetHandle returns exploreProfilesExploreProfilesExploreProfileResultItemsProfile.Handle, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfile) GetHandle() string {
	return v.Handle
}

// GetId returns exploreProfilesExploreProfilesExploreProfileResultItemsProfile.Id, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfile) GetId() string { return v.Id }

// GetOnChainIdentity returns exploreProfilesExploreProfilesExploreProfileResultItemsProfile.OnChainIdentity, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfile) GetOnChainIdentity() exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentity {
	return v.OnChainIdentity
}

// GetOwnedBy returns exploreProfilesExploreProfilesExploreProfileResultItemsProfile.OwnedBy, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfile) GetOwnedBy() string {
	return v.OwnedBy
}

// GetStats returns exploreProfilesExploreProfilesExploreProfileResultItemsProfile.Stats, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfile) GetStats() exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats {
	return v.Stats
}

// GetMetadata returns exploreProfilesExploreProfilesExploreProfileResultItemsProfile.Metadata, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfile) GetMetadata() string {
	return v.Metadata
}

// exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentity includes the requested fields of the GraphQL type OnChainIdentity.
type exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentity struct {
	// The ens information
	Ens exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentityEnsEnsOnChainIdentity `json:"ens"`
}

// GetEns returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentity.Ens, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentity) GetEns() exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentityEnsEnsOnChainIdentity {
	return v.Ens
}

// exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentityEnsEnsOnChainIdentity includes the requested fields of the GraphQL type EnsOnChainIdentity.
type exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentityEnsEnsOnChainIdentity struct {
	// The default ens mapped to this address
	Name string `json:"name"`
}

// GetName returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentityEnsEnsOnChainIdentity.Name, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileOnChainIdentityEnsEnsOnChainIdentity) GetName() string {
	return v.Name
}

// exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats includes the requested fields of the GraphQL type ProfileStats.
// The GraphQL type's documentation follows.
//
// The Profile Stats
type exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats struct {
	// Total collects count
	TotalCollects int `json:"totalCollects"`
	// Total comment count
	TotalComments int `json:"totalComments"`
	// Total follower count
	TotalFollowers int `json:"totalFollowers"`
	// Total following count (remember the wallet follows not profile so will be same for every profile they own)
	TotalFollowing int `json:"totalFollowing"`
	// Total mirror count
	TotalMirrors int `json:"totalMirrors"`
	// Total post count
	TotalPosts int `json:"totalPosts"`
	// Total publication count
	TotalPublications int `json:"totalPublications"`
}

// GetTotalCollects returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats.TotalCollects, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats) GetTotalCollects() int {
	return v.TotalCollects
}

// GetTotalComments returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats.TotalComments, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats) GetTotalComments() int {
	return v.TotalComments
}

// GetTotalFollowers returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats.TotalFollowers, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats) GetTotalFollowers() int {
	return v.TotalFollowers
}

// GetTotalFollowing returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats.TotalFollowing, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats) GetTotalFollowing() int {
	return v.TotalFollowing
}

// GetTotalMirrors returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats.TotalMirrors, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats) GetTotalMirrors() int {
	return v.TotalMirrors
}

// GetTotalPosts returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats.TotalPosts, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats) GetTotalPosts() int {
	return v.TotalPosts
}

// GetTotalPublications returns exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats.TotalPublications, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultItemsProfileStats) GetTotalPublications() int {
	return v.TotalPublications
}

// exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo includes the requested fields of the GraphQL type PaginatedResultInfo.
// The GraphQL type's documentation follows.
//
// The paginated result info
type exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo struct {
	// Cursor to query next results
	Next string `json:"next"`
	// Cursor to query the actual results
	Prev string `json:"prev"`
	// The total number of entities the pagination iterates over. If its null then
	// its not been worked out due to it being an expensive query and not really
	// needed for the client. All main counters are in counter tables to allow them
	// to be faster fetching.
	TotalCount int `json:"totalCount"`
}

// GetNext returns exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo.Next, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo) GetNext() string {
	return v.Next
}

// GetPrev returns exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo.Prev, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo) GetPrev() string {
	return v.Prev
}

// GetTotalCount returns exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo.TotalCount, and is useful for accessing the field via an interface.
func (v *exploreProfilesExploreProfilesExploreProfileResultPageInfoPaginatedResultInfo) GetTotalCount() int {
	return v.TotalCount
}

// exploreProfilesResponse is returned by exploreProfiles on success.
type exploreProfilesResponse struct {
	ExploreProfiles exploreProfilesExploreProfilesExploreProfileResult `json:"exploreProfiles"`
}

// GetExploreProfiles returns exploreProfilesResponse.ExploreProfiles, and is useful for accessing the field via an interface.
func (v *exploreProfilesResponse) GetExploreProfiles() exploreProfilesExploreProfilesExploreProfileResult {
	return v.ExploreProfiles
}

func exploreProfiles(
	ctx context.Context,
	client graphql.Client,
	cursor string,
	sortCriteria ProfileSortCriteria,
) (*exploreProfilesResponse, error) {
	req := &graphql.Request{
		OpName: "exploreProfiles",
		Query: `
query exploreProfiles ($cursor: Cursor, $sortCriteria: ProfileSortCriteria!) {
	exploreProfiles(request: {sortCriteria:$sortCriteria,limit:"50",cursor:$cursor}) {
		pageInfo {
			next
			prev
			totalCount
		}
		items {
			handle
			id
			onChainIdentity {
				ens {
					name
				}
			}
			ownedBy
			stats {
				totalCollects
				totalComments
				totalFollowers
				totalFollowing
				totalMirrors
				totalPosts
				totalPublications
			}
			metadata
		}
	}
}
`,
		Variables: &__exploreProfilesInput{
			Cursor:       cursor,
			SortCriteria: sortCriteria,
		},
	}
	var err error

	var data exploreProfilesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
